
package ops;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class BigDecimalOps {

	public static final BigDecimal TWO = new BigDecimal(2);
	public static final BigDecimal THREE = new BigDecimal(3);
	public static final BigDecimal LOG_TWO = new BigDecimal("0.69314718055994530941723212145817656807550013"
			+ "436025525412068000949339362196969471560586332699641868754200148102057068573368552023575813055"
			+ "703267075163507596193072757082837143519030703862389167347112335011536449795523912047517268157"
			+ "493206515552473413952588295045300709532636664265410423915781495204374043038550080194417064167"
			+ "151864471283996817178454695702627163106454615025720740248163777338963855069526066834113727387"
			+ "372292895649354702576265209885969320196505855476470330679365443254763274495125040606943814710"
			+ "468994650622016772042452452961268794654619316517468139267250410380254625965686914419287160829"
			+ "380317271436778265487756648508567407764845146443994046142260319309673540257444607030809608504"
			+ "748663852313818167675143866747664789088143714198549423151997354880375165861275352916610007105"
			+ "355824987941472950929311389715599820565439287170007218085761025236889213244971389320378439353"
			+ "088774825970171559107088236836275898425891853530243634214367061189236789192372314672321720534"
			+ "016492568727477823445353476481149418642386776774406069562657379600867076257199184734022651462"
			+ "837904883062033061144630073719489002743643965002580936519443041191150608094879306786515887090"
			+ "060520346842973619384128965255653968602219412292420757432175748909770675268711581705113700915"
			+ "894266547859596489065305846025866838294002283300538207400567705304678700184162404418833232798"
			+ "386349001563121889560650553151272199398332030751408426091479001265168243443893572472788205486"
			+ "271552741877243002489794540196187233980860831664811490930667519339312890431641370681397776498"
			+ "176974868903887789991296503619270710889264105230924783917373501229842420499568935992206602204"
			+ "654941510613918788574424557751020683703086661948089641218680779020818158858000168811597305618"
			+ "667619918739520076671921459223672060253959543654165531129517598994005600036651356756905124592"
			+ "682574394648316833262490180382424082423145230614096380570070255138770268178516306902551370323"
			+ "405380214501901537402950994226299577964742713815736380172987394070424217997226696297993931270"
			+ "693574724049338653087975872169964512944649188377115670167859880498183889678413493831401407316"
			+ "647276532763591923351123338933870951320905927218547132897547079789138444546667619270288553342"
			+ "342989932180376915497334026754675887323677834291619181043011609169526554785973289176354555674"
			+ "286387746398710191243175425588830120677921028034120687975914308128330723030088349470579249659"
			+ "100586001234156175741327246594306843546521113502154434153995538185652275022142456644000627618"
			+ "330320647272572197515290827856842132079598863896727711955221881904660395700977470651261950527"
			+ "893229608893140562543344255239206203034394177735794559212590199255911484402423901255425900312"
			+ "953705192206150643458378787300203541442178575801323645166070991438314500498589668857722214865"
			+ "288216941812704886075897220321666312837832915676307498729857463892826937350984077804939500493"
			+ "399876264755070316221613903484529942491724837340613662263834936811168416705692521475138393063"
			+ "845537186268779732889555887163442975624475539236636948887782389017498102735655240505185477306"
			+ "194405242322125590248330827788888905962911972995457441562451248592683112607467972816380902500"
			+ "056559991461283325435811140484820606408242247924038557647623503110032425970914250111461558483"
			+ "067001258318219153472074741119400983557327282614427382139707047795625967057902303384806171345"
			+ "555368553758106574973444792251119654616182789601006851296539547965866378352247362454609358503"
			+ "605067841439114452314577803359179211279557050555545143878881881535194859344672464294986405062"
			+ "651842447539566378337348220753329448130649336035461010177464932678771671986120739683201235960"
			+ "772902468304594031305637763132401080420285435902694509403074001493395076731602850286973031871"
			+ "823998433525743549956085025660897833955642114948073393626075102381833141100470890395013433029"
			+ "741347484054061587753968883815407698017767303699910749246978478431284303641128920280122725634"
			+ "68391623354787727340063958657179819069358127");
	
	public static BigDecimal factorial(int n) {
		if (n < 0) {
			throw new IllegalArgumentException(Integer.toString(n));
		}
		BigDecimal val = new BigDecimal(1);
		for (int i = 1; i < n; i++) {
			val = val.add(val.multiply(new BigDecimal(i)));
		}
		return val;
	}

	public static BigDecimal pow(BigDecimal val, long n) {
		if (n < 0) {
			return BigDecimal.ONE.divide(pow(val, -n), 300, RoundingMode.HALF_UP);
		} else if (n == 0) {
			return BigDecimal.ONE;
		}
		if (n % 2 == 1) {
			if (n == 1) {
				return val;
			} else {
				return pow(val, n - 1l).multiply(val);
			}
		} else {
			if (n == 2) {
				return val.multiply(val);
			} else {
				return pow(pow(val, n / 2l), 2l);
			}
		}
	}

	public static void main(String[] args) {
		System.out.println(log(new BigDecimal(123.3123)));
	}

	public static BigDecimal log(BigDecimal val, int scale, int iterations) {
		if (val == null) {
			throw new NullPointerException();
		}
		if (val.compareTo(BigDecimal.ZERO) <= 0) {
			throw new IllegalArgumentException();
		}
		int compared = val.compareTo(TWO);
		if (compared > 0) {
			int twoCount = 0;
			BigDecimal divided = val;
			do {
				divided = divided.divide(TWO, scale, RoundingMode.HALF_EVEN);
				twoCount++;
			} while (divided.compareTo(TWO) > 0);
			return LOG_TWO.multiply(new BigDecimal(twoCount)).add(log(divided, scale, iterations));
		} else if (compared == 0) {
			return LOG_TWO.setScale(scale, RoundingMode.HALF_UP);
		}
		BigDecimal fraction = val.subtract(BigDecimal.ONE).divide(val.add(BigDecimal.ONE), scale, RoundingMode.HALF_EVEN);
		BigDecimal result = BigDecimal.ZERO;
		BigDecimal valSquared = fraction.multiply(fraction);
		BigDecimal previous = fraction;
		for (int i = 1; i < iterations * 2; i += 2) {
			BigDecimal tmp = previous;
			tmp = tmp.divide(new BigDecimal(i), scale, RoundingMode.HALF_EVEN);
			result = result.add(tmp);
			previous = previous.multiply(valSquared);
		}
		return TWO.multiply(result);
	}

	public static BigDecimal log(BigDecimal val, int base, int scale, int iterations) {
		BigDecimal loggedBase = log(new BigDecimal(base), scale, iterations);
		BigDecimal logged = log(val, scale, iterations);
		return logged.divide(loggedBase, scale, RoundingMode.HALF_UP);
	}

	public static BigDecimal log(BigDecimal val, int base) {
		BigDecimal loggedBase = log(new BigDecimal(base));
		BigDecimal logged = log(val);
		return logged.divide(loggedBase, 50, RoundingMode.HALF_UP);
	}

	public static BigDecimal log(BigDecimal val) {
		return log(val, 50, 200);
	}
}
